const { app, BrowserWindow, ipcMain } = require('electron');
const { db, registerUser, loginUser } = require('./database.js');
const path = require('path');

let mainWindow;

// Cr√©er la fen√™tre principale
app.whenReady().then(() => {
    mainWindow = new BrowserWindow({
        width: 1500,
        height: 900,
        webPreferences: {
            nodeIntegration: false,  // D√©sactivation de nodeIntegration pour des raisons de s√©curit√©
            contextIsolation: true,  // Activation de contextIsolation pour s√©curiser le contexte
            preload: path.join(__dirname, 'preload.js')  // Chargement du fichier preload.js
        },
    });

    mainWindow.loadFile('index.html');


    // Fermer l'application lorsque toutes les fen√™tres sont ferm√©es
    app.on('window-all-closed', () => {
        if (process.platform !== 'darwin') {
            app.quit();
        }
    });
});

// G√©rer l'activation de l'application sur macOS (pour rouvrir une fen√™tre si n√©cessaire)
app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        app.whenReady().then(() => {
            mainWindow = new BrowserWindow({
                width: 1500,
                height: 900,
                webPreferences: {
                    nodeIntegration: false,
                    contextIsolation: true,
                    preload: path.join(__dirname, 'preload.js')
                },
            });
            mainWindow.loadFile('index.html');
        });
    }
});

// √âv√©nements pour la gestion de la connexion et de l'inscription
ipcMain.on('login-user', (event, credentials) => {
    loginUser(credentials.email, credentials.password, (err, user) => {
        if (err || !user) {
            event.reply('login-failed', 'Email ou mot de passe incorrect');
        } else {
            event.reply('login-success', user);
        }
    });
});

ipcMain.on('register-user', (event, userData) => {
    const { name, email, password } = userData;
    registerUser(name, email, password, (err, userId) => {
        if (err) {
            event.reply('register-failed', err.message);
        } else {
            event.reply('register-success', userId);
        }
    });
});

// Fermeture de l'application
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

ipcMain.on('go-to-accueil', () => {
    if (mainWindow) {
        const fs = require('fs');
        const path = require('path');
        const accueilPath = path.join(__dirname, 'accueil.html');

        // V√©rifie si le fichier existe avant de charger
        if (fs.existsSync(accueilPath)) {
            console.log("üîÅ Redirection via main vers accueil.html");
            mainWindow.loadFile(accueilPath);
        } else {
            console.warn("‚ö†Ô∏è accueil.html non trouv√©. V√©rifie le chemin.");
        }
    } else {
        console.error("‚ùå mainWindow non initialis√© !");
    }
});
